/**
 * Title:
 *    IE Stylesheet
 * Description:
 *    IE only stylesheet to be used for IE8 and below and will
 *    compile into: assets/css/styles.css
 * Sections:
 *    $. Setup
 *    $. Styles
 */
/* $. Setup
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Main Stylesheet
 * Description:
 *    This is the main Scss file which will import all partials and
 *    compile into: assets/css/styles.css
 * Sections:
 *    $. Config
 *    $. Base
 *    $. Layout
 *    $. Modules
 *    $. Interface
 *    $. Helpers
 */
/* $. Config - Variables, global mixins & Bower components
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Variables
 * Description:
 *    Project variables go here
 * Sections:
 *    $. Breakpoints
 *    $. Colours
 *    $. Typography
 *    $. Layout
 *    $. Icons
 *    $. Z axis
 */
/* $. Breakpoints
\*----------------------------------------------------------------*/
/* $. Colours
\*----------------------------------------------------------------*/
/**
 * Base colours
 */
/* defaults */
/* shades */
/* primary */
/* secondary */
/**
 * UI colours
 */
/* shades */
/* palette */
/* states */
/* $. Typography
\*----------------------------------------------------------------*/
/* $. Layout
\*----------------------------------------------------------------*/
/* $. Icons
\*----------------------------------------------------------------*/
/* $. Z axis
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Global Mixins
 * Description:
 *    This is an archive for all global mixins located within the
 *    'mixins' folder
 * Sections:
 *    $. Media Queries
 *    $. Your new mixins
 */
/* $. Media Queries - https://github.com/jakearchibald/sass-ie
\*----------------------------------------------------------------*/
/* $. Media Queries - https://github.com/jakearchibald/sass-ie
\*----------------------------------------------------------------*/
/* $. Your new mixins
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Vendors
 * Description:
 *    Importing and using the bower components within your Sass
 * Sections:
 *    $. Variables
 *    $. Imports
 *    $. Configuration
 */
/* $. Variables
\*----------------------------------------------------------------*/
/**
 * GROOT
 */
/* $. Imports
\*----------------------------------------------------------------*/
@import url(./node_modules/normalize.css/normalize.css);
/*! Groot v0.0.7 | MIT License | http://github.com/lukewhitehouse/groot */
/**
 ***************************************************************************
 * Groot > groot.scss
 ***************************************************************************
 *
 * Acting as a hub to build upon the components which make up the
 * Groot system.
 *
 * $. Variables
 * $. Base
 * $. Modifiers
 * $. Builder
 *
 */
/* $. Variables
\*----------------------------------------------------------------*/
/**
 ***************************************************************************
 * Groot > src/_variables.scss
 ***************************************************************************
 *
 * All available variables have present !default values which can be
 * overridden by the user. In addition, to prevent conflicts with 3rd
 * party packages, each variable is namespaced with `$gr`, short for
 * groot.
 *
 * $. Core
 * $. Modifiers
 * $. Sizing
 * $. Grid Alignment
 * $. Item Alignment
 *
 */
/* $. Core
\*----------------------------------------------------------------*/
/* $. Modifiers
\*----------------------------------------------------------------*/
/* $. Sizing
\*----------------------------------------------------------------*/
/* $. Grid Alignment
\*----------------------------------------------------------------*/
/* $. Item Alignment
\*----------------------------------------------------------------*/
/* $. Base
\*----------------------------------------------------------------*/
/**
 ***************************************************************************
 * Groot > src/_base.scss
 ***************************************************************************
 *
 * Create the main classes for the grid's container and its children.
 *
 * $. Container
 * $. Item
 *
 */
/* $. Container
\*----------------------------------------------------------------*/
.grid {
  box-sizing: border-box;
  display: block;
  padding: 0;
  margin: 0 0 0 -1em;
  direction: inherit;
  text-align: inherit; }

/* $. Item
\*----------------------------------------------------------------*/
.grid__item {
  box-sizing: border-box;
  display: inline-block;
  width: 100%;
  margin: 0 -.25em 0 0;
  padding: 0 0 0 1em;
  direction: inherit;
  text-align: inherit;
  vertical-align: top; }

/* $. Modifiers
\*----------------------------------------------------------------*/
/**
 ***************************************************************************
 * Groot > src/_modifiers.scss
 ***************************************************************************
 *
 * Styling to produce the various modifiers that come prebuilt into the
 * grid system.
 *
 * $. Spacing
 * $. Directional
 * $. Alignment
 *
 */
/* $. Spacing
\*----------------------------------------------------------------*/
.grid--spaced {
  margin: 0 0 0 -2em; }
  .grid--spaced > .grid__item {
    padding: 0 0 0 2em; }

.grid--compact {
  margin: 0; }
  .grid--compact > .grid__item {
    padding: 0; }

/* $. Directional
\*----------------------------------------------------------------*/
.grid--reversed {
  direction: rtl; }
  .grid--reversed:after {
    content: "";
    clear: both;
    display: table; }
  .grid--reversed .grid__item {
    margin: 0 0 0 -.25em; }

/* $. Alignment
\*----------------------------------------------------------------*/
.grid--centered {
  text-align: center; }

.grid__item--centered {
  display: block;
  margin: 0 auto; }

/* $. Build
\*----------------------------------------------------------------*/
/**
 ***************************************************************************
 * Groot > src/_builder.scss
 ***************************************************************************
 *
 * This Mixin is used to build out the Grid system. This takes two
 * parameters, one for the number of columns to create and the second
 * for at what breakpoint this should be created for.
 *
 * @param | int    | $cols   | Number of Columns to build
 * @param | string | $suffix | Suffix for the Class declaration
 *
 * @return class declartion
 *
 */
/* $. Configuration
\*----------------------------------------------------------------*/
/**
     * Loop through $cols
     */
/**
         * Create a loop ending with 1 less than the $col parameter
         */
/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--1-12 {
  width: 8.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--2-12 {
  width: 16.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--3-12 {
  width: 25%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--4-12 {
  width: 33.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--5-12 {
  width: 41.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--6-12 {
  width: 50%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--7-12 {
  width: 58.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--8-12 {
  width: 66.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--9-12 {
  width: 75%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--10-12 {
  width: 83.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--11-12 {
  width: 91.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number
                 */
.grid__item--12-12 {
  width: 100%; }

/**
     * Loop through $cols
     */
/**
         * Create a loop ending with 1 less than the $col parameter
         */
/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--1-12-bp1 {
  width: 8.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--2-12-bp1 {
  width: 16.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--3-12-bp1 {
  width: 25%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--4-12-bp1 {
  width: 33.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--5-12-bp1 {
  width: 41.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--6-12-bp1 {
  width: 50%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--7-12-bp1 {
  width: 58.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--8-12-bp1 {
  width: 66.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--9-12-bp1 {
  width: 75%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--10-12-bp1 {
  width: 83.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--11-12-bp1 {
  width: 91.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--12-12-bp1 {
  width: 100%; }

/**
     * Loop through $cols
     */
/**
         * Create a loop ending with 1 less than the $col parameter
         */
/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--1-12-bp2 {
  width: 8.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--2-12-bp2 {
  width: 16.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--3-12-bp2 {
  width: 25%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--4-12-bp2 {
  width: 33.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--5-12-bp2 {
  width: 41.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--6-12-bp2 {
  width: 50%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--7-12-bp2 {
  width: 58.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--8-12-bp2 {
  width: 66.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--9-12-bp2 {
  width: 75%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--10-12-bp2 {
  width: 83.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--11-12-bp2 {
  width: 91.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--12-12-bp2 {
  width: 100%; }

/**
     * Loop through $cols
     */
/**
         * Create a loop ending with 1 less than the $col parameter
         */
/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--1-12-bp3 {
  width: 8.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--2-12-bp3 {
  width: 16.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--3-12-bp3 {
  width: 25%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--4-12-bp3 {
  width: 33.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--5-12-bp3 {
  width: 41.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--6-12-bp3 {
  width: 50%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--7-12-bp3 {
  width: 58.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--8-12-bp3 {
  width: 66.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--9-12-bp3 {
  width: 75%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--10-12-bp3 {
  width: 83.3333333333%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--11-12-bp3 {
  width: 91.6666666667%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--12-12-bp3 {
  width: 100%; }

/**
         * Create a loop ending with 1 less than the $col parameter
         */
/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--1-5-bp3 {
  width: 20%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--2-5-bp3 {
  width: 40%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--3-5-bp3 {
  width: 60%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--4-5-bp3 {
  width: 80%; }

/**
             * Get the length of the $suffix parameter
             */
/**
             * If a breakpoint has been declared, declare the class
             * for that breakpoint.
             */
/**
                 * Declare a class based on $col number AND breakpoint
                 */
.grid__item--5-5-bp3 {
  width: 100%; }

/* $. Base - Project defaults & Element styling
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Defaults
 * Description:
 *    These are the base styles for the project
 * Sections:
 *    $. Defaults
 *    $. Selections
 */
/* $. Defaults
\*----------------------------------------------------------------*/
*,
*:before,
*:after {
  box-sizing: inherit;
  -webkit-font-smoothing: antialiased; }

html {
  font-family: Corbel, "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", "DejaVu Sans", "Bitstream Vera Sans", "Liberation Sans", Verdana, "Verdana Ref", sans-serif;
  line-height: 1.5;
  font-size: 100%;
  overflow-y: scroll;
  box-sizing: border-box;
  font-size: 112.5%; }

body {
  color: #252525;
  background-color: #FFFFFF; }

/* $. Selections
\*----------------------------------------------------------------*/
::-moz-selection {
  background: rgba(102, 102, 102, 0.5);
  color: #FFF;
  text-shadow: none; }

::selection {
  background: rgba(102, 102, 102, 0.5);
  color: #FFF;
  text-shadow: none; }

a:link {
  -webkit-tap-highlight-color: rgba(102, 102, 102, 0.5); }

:focus {
  outline: 0;
  box-shadow: 0 0 1px #e6e5e5; }

/**
 * Title:
 *    Elements
 * Description:
 *    The styling of basic element tags
 * Sections:
 *    $. Basics
 *    $. Links
 *    $. Blockquotes
 *    $. Embedded
 */
/* $. Basics
\*----------------------------------------------------------------*/
hr {
  border: 0;
  border-top: 1px solid #e6e5e5; }

ins {
  text-decoration: none;
  color: #000;
  background: #ff9; }

mark {
  font-style: italic;
  font-weight: bold; }

pre {
  overflow-x: auto; }

address {
  white-space: pre-line; }

/* $. Links
\*----------------------------------------------------------------*/
a {
  text-decoration: none;
  color: #28AAE1; }
  a:hover {
    color: #1a8cbc; }

a[href^="tel"] {
  color: inherit;
  text-decoration: none; }

/* $. Blockquotes
\*----------------------------------------------------------------*/
blockquote {
  clear: both;
  margin-left: 0;
  margin-right: 0;
  font-style: italic;
  padding-left: 2em;
  padding-right: 2em; }
  blockquote p {
    font-size: 1.35em; }

/* $. Embedded
\*----------------------------------------------------------------*/
img {
  display: inline-block;
  margin: 0 auto;
  font-style: italic;
  color: #666;
  vertical-align: middle; }
  img[width] {
    width: auto !important; }
  img[height] {
    height: auto !important; }

img,
audio,
canvas,
embed,
object,
video {
  max-width: 100%; }

iframe {
  display: block; }

/**
 * Title: Typography
 * Description: Base typography styles dealing with Vertical Rhythm and Hierarchy
 * Sections:
 *    $. Vertical Rhythm
 *    $. Headings and Common Styles
 */
/* $. Vertical Rhythm
\*----------------------------------------------------------------*/
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: 1em;
  line-height: 1.2; }

blockquote, pre, p, ul, ol, dl, hr {
  margin-top: 0; }

p, ul, ol, dl, hr, form, table, blockquote, pre {
  margin-bottom: 1em; }

ul > :last-child,
ol > :last-child,
dl > :last-child,
blockquote > :last-child {
  margin-bottom: 0; }

/* $. Headings and Common Styles
\*----------------------------------------------------------------*/
h1, .alpha {
  font-size: 36px; }

h2, .beta {
  font-size: 30px; }

h3, .gamma {
  font-size: 24px; }

h4, .delta {
  font-size: 20px; }

h5, .epsilon {
  font-size: 16px; }

h6, .zeta {
  font-size: 14px; }

.intro {
  font-size: 1.25em; }

.headline {
  border-bottom: 1px solid #e6e5e5;
  padding-bottom: .45em; }

/**
 * Title:
 *    Lists
 * Description:
 *    Styling of <ul>, <ol>, <dl> and its children
 * Sections:
 *    $. Basics
 *    $. Your Styles
 */
/* $. Lists
\*----------------------------------------------------------------*/
ul, ol {
  margin-left: 2em;
  padding-left: 0; }
  ul ul, ul ol, ol ul, ol ol {
    margin-top: 0.5em;
    margin-bottom: 0; }

li {
  margin-bottom: 0.5em; }

dt {
  font-weight: bold; }

dd {
  margin-left: 0;
  margin-bottom: 0.5em;
  font-style: italic; }

/* $. Your Styles
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Forms
 * Description:
 *    Styling of forms and form variations
 * Sections:
 *    $. Basics
 *    $. Placeholders
 */
/* $. Basics
\*----------------------------------------------------------------*/
form {
  margin: 0 0 1.5em 0; }

fieldset {
  margin-bottom: 1.5em;
  padding: 0 1em; }
  fieldset:last-child {
    margin-top: 0; }

legend {
  font-size: 1.25em;
  margin-bottom: 1em;
  padding: 0 1em; }

label {
  display: block;
  padding-bottom: 0.25em; }

input[type=checkbox],
input[type=radio] {
  vertical-align: baseline;
  background: none;
  border: none;
  height: .8em;
  width: .8em; }

input,
select,
textarea {
  width: 100%;
  padding: 0.5em;
  border: 1px solid;
  border-radius: 0;
  color: #666;
  background-color: #FFF;
  border-color: #CCC; }

textarea {
  resize: vertical; }

form ul,
form ol {
  list-style: none;
  margin-left: 0;
  margin-bottom: 1em; }

form li {
  margin-bottom: 0.5em; }

form li:last-child,
fieldset:last-child {
  margin-bottom: 0; }

/* $. Placeholders
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Tables
 * Description:
 *    Styling of tables and their variations
 * Sections:
 *    $. Basics
 *    $. Your Styles
 */
/* $. Basics
\*----------------------------------------------------------------*/
table {
  width: 100%; }

td, th, caption {
  padding: 0.5em;
  border: 1px solid #e6e5e5;
  vertical-align: top; }

tr:nth-child(odd) td {
  background: #f2f2f2; }

th, caption {
  font-weight: bold;
  background: #e6e5e5; }

caption {
  background: #dfdfdf; }

/* $. Your Styles
\*----------------------------------------------------------------*/
.table--hovered tr:hover td {
  background: #ececec; }

/* $. Modules - Global objects i.e. .btn, .island, etc
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Icon Module
 * Description:
 *    Responsible for all sizes and styling of Grunticon based icons
 * Sections:
 *    $. Setup
 *    $. Base
 *    $. Variations
 *
 * TODO:
 *    - Change .svg sizes based on this file for better IE8 support
 */
/* $. Setup
\*----------------------------------------------------------------*/
/* $. Base
\*----------------------------------------------------------------*/
.icon {
  width: 20px;
  height: 20px;
  display: inline-block;
  background-size: contain; }

/* $. Variations
\*----------------------------------------------------------------*/
/* Generic sizing */
.icon--small {
  width: 16px;
  height: 16px; }

.icon--medium {
  width: 30px;
  height: 30px; }

.icon--large {
  width: 45px;
  height: 45px; }

.icon--xlarge {
  width: 65px;
  height: 65px; }

/* Styling */
.icon--transparent {
  opacity: .3;
  filter: alpha(opacity=30); }

/* Logos */
/**
 * Title:
 *    Media Module - http://goo.gl/Xf6MJ
 * Description:
 *    The .media module and its extensions
 * Sections:
 *    $. Setup
 *    $. Component
 *    $. Modifications
 */
/* $. Setup
\*----------------------------------------------------------------*/
/* $. Component
\*----------------------------------------------------------------*/
.media {
  margin-bottom: 1em; }

.media__body {
  overflow: hidden; }
  .media__body:last-child {
    margin-bottom: 0; }

.media__img {
  margin-bottom: 1em;
  float: left;
  margin-bottom: 0;
  margin-right: 2em; }

/* $. Modifications
\*----------------------------------------------------------------*/
.media--flipped .media__img {
  float: right;
  margin-left: 2em;
  margin-right: 0; }

/**
 * Title:
 *    List variations
 * Description:
 *    Styling for different types of lists throughout the site.
 * Sections:
 *    $. Resets
 *    $. Components
 */
/* $. Reset
\*----------------------------------------------------------------*/
.nav,
.list--unset {
  list-style: none;
  margin: 0; }
  .nav ul, .nav ol,
  .list--unset ul,
  .list--unset ol {
    list-style: none;
    margin: 0; }


.list--inline li,
.list--inline dt,
.list--inline dd {
  display: inline-block;
  margin: 0 0.25em; }
  
  .list--inline li:first-child,
  .list--inline dt:first-child,
  .list--inline dd:first-child {
    margin-left: 0; }
  
  .list--inline li:last-child,
  .list--inline dt:last-child,
  .list--inline dd:last-child {
    margin-right: 0; }


.list--inline dt,
.list--inline dd {
  font-style: normal; }

/* $. Components
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Button Module
 * Description:
 *    The .btn module and its extensions
 * Sections:
 *    $. Setup
 *    $. Component
 *    $. Modifications
 */
/* $. Setup
\*----------------------------------------------------------------*/
button,
input[type="button"],
input[type="submit"],
.btn {
  display: inline-block;
  padding: 0.5em 1em;
  border: 0;
  transition: all .15s ease-out; }

/* $. Component
\*----------------------------------------------------------------*/
/* $. Modifications
\*----------------------------------------------------------------*/
/**
 * Themes
 */
.btn--primary {
  color: #FFFFFF;
  background: #888888; }
  .btn--primary:hover, .btn--primary:focus {
    color: #FFFFFF;
    background: #6f6e6e; }

/**
 * Position and size
 */
.btn--blocked {
  width: 100%;
  text-align: left; }

.btn--large {
  font-size: 19px; }

.btn--small {
  font-size: 12px; }

/**
 * Icons
 */
.btn--icon {
  position: relative;
  padding-right: 2.5em; }

/**
 * Title:
 *    Panels
 * Description:
 *    Used to provide emphasis for a section of content
 * Sections:
 *    $. Setup
 *    $. Component
 *    $. Themes
 *    $. Sizing
 *    $. Grid
 */
/* $. Setup
\*----------------------------------------------------------------*/
/**
 * Mixin to give colors and backgrounds for your panel.
 *
 * @param  $text   Colour of the Text
 * @param  $bg     Colour of the Background
 */
/* $. Component
\*----------------------------------------------------------------*/
.panel {
  position: relative;
  display: block;
  padding: 1em;
  padding: 2em; }

/* $. Sizing
\*----------------------------------------------------------------*/
.panel--large {
  padding: 2em;
  padding: 4em; }

.panel--small {
  padding: 0.5em;
  padding: 1em; }

.panel--slim {
  padding: 0.75em;
  padding: 1.5em; }

/* $. Themes
\*----------------------------------------------------------------*/
.panel--white {
  color: #252525;
  background-color: #FFFFFF;
  transition: background-color .15s ease-out; }
  .panel--white[href]:hover, .panel--white[href]:focus {
    color: #252525;
    background-color: #f2f2f2; }

.panel--grey {
  color: #252525;
  background-color: #F1F1F1;
  transition: background-color .15s ease-out; }
  .panel--grey[href]:hover, .panel--grey[href]:focus {
    color: #252525;
    background-color: #e4e4e4; }

.panel--success {
  border-color: #2ECC71; }

.panel--error {
  border-color: #E74C3C; }

/* $. Interface - Project specific objects i.e. .work, .product, etc
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Section object
 * Description:
 *    Used to visually define a different section. This is to be used as a main object that
 *    everything sits within.
 * Sections:
 *    $. Setup
 *    $. Base
 *    $. Elements
 *    $. Themes
 *    $. Sizing
 */
/* $. Setup
\*----------------------------------------------------------------*/
/**
 * Mixin to give colors and backgrounds for your section.
 *
 * @param  $text   Colour of the Text
 * @param  $bg     Colour of the Background
 */
/* $. Base
\*----------------------------------------------------------------*/
.section {
  position: relative;
  padding: 1em 0;
  padding: 2em 0; }

/* $. Elements
\*----------------------------------------------------------------*/
/* $. Themes
\*----------------------------------------------------------------*/
/* $. Sizing
\*----------------------------------------------------------------*/
.section--small {
  padding: 1em 0; }

.section--large {
  padding: 2em 0 2em 0;
  padding: 4em 0 4em 0; }

/**
 * Title:
 *    Navigation
 * Description:
 *    The .nav module and its extensions
 * Sections:
 *    $. Variables
 *    $. Container
 *    $. Component
 *    $. Primary
 *    $. Secondary
 *    $. Tertiary
 */
/* $. Variables
\*----------------------------------------------------------------*/
/* $. Container
\*----------------------------------------------------------------*/
/* $. Component
\*----------------------------------------------------------------*/
/* $. Primary
\*----------------------------------------------------------------*/
/* $. Secondary
\*----------------------------------------------------------------*/
/* $. Tertiary
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Breadcrumbs
 * Description:
 *    Styling the breadcrumbs component.
 * Sections:
 *    $. Variables
 *    $. Base
 */
/* $. Variables
\*----------------------------------------------------------------*/
/* $. Base
\*----------------------------------------------------------------*/
.breadcrumbs {
  position: relative;
  margin: 0;
  font-size: 12px;
  padding-top: 1em;
  border-top: 0.25em solid #F1F1F1; }
  .breadcrumbs a {
    color: #28AAE1;
    border-bottom: 1px solid #28AAE1;
    border-bottom-color: rgba(40, 170, 225, 0.15);
    transition: all .15s ease-out; }
    .breadcrumbs a:hover, .breadcrumbs a:focus {
      border-bottom-color: rgba(40, 170, 225, 0.5); }

.pagination {
  margin-top: 2em;
  padding: 0.5em 0;
  font-size: 19px;
  border-top: 1px solid #F1F1F1;
  border-bottom: 1px solid #F1F1F1; }
  .pagination a, .pagination span {
    display: inline-block; }
  .pagination a {
    margin: 0 0.25em;
    line-height: 1;
    border-bottom: 1px solid #28AAE1; }
  .pagination .pages {
    margin-right: 2em;
    font-size: 13px; }
  .pagination .first,
  .pagination .last {
    border-bottom: 0; }

/* $. Layout - Page based layouts i.e. .header, .page-86, etc
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Containers
 * Description:
 *    Container based layout modules
 * Sections:
 *    $. Base
 *    $. Modifications
 */
/* $. Base
\*----------------------------------------------------------------*/
.container {
  margin: 0 auto;
  width: 92.5%;
  min-width: 15em;
  max-width: 68.5em;
  width: 85%; }

/* $. Modifications
\*----------------------------------------------------------------*/
.container--small {
  max-width: 850px; }

.container--flush {
  position: relative;
  width: 100%;
  width: 85%; }

/**
 * Title:
 *    Content
 * Description:
 *    Content coming from the CMS
 * Sections:
 *    $. Content
 */
/* $. Content
\*----------------------------------------------------------------*/
.content {
  max-width: 850px; }
  .content > *:last-child {
    margin-bottom: 0; }

/**
 * Title:
 *    CMS
 * Description:
 *    Fields and selectors that come through WordPress or a plugin
 * Sections:
 *    $. Gravity Forms
 *    $. WYSIWIG
 */
/* $. Gravity Forms
\*----------------------------------------------------------------*/
.gform_fields {
  margin-bottom: 0; }

.gfield_required {
  display: inline-block;
  margin-left: 0.25em;
  font-size: 13px;
  color: #28AAE1; }

.validation_message {
  margin-top: -0.5em;
  margin-bottom: 1em;
  font-size: 13px;
  color: #888888; }
  .ginput_container_textarea + .validation_message {
    margin-top: -1em; }

.gform_validation_container {
  display: none;
  user-select: none; }

/* $. WYSIWIG
\*----------------------------------------------------------------*/
.alignleft {
  float: left;
  margin: 1em 1em 0 0; }

.alignright {
  float: right;
  margin: 1em 0 0 1em;
  text-align: right; }

.aligncenter {
  margin-left: auto;
  margin-right: auto; }

/* $. Other
\*----------------------------------------------------------------*/
/* $. Helpers - i.e. Clearfixes, accessbility hidden, etc
\*----------------------------------------------------------------*/
/**
 * Title:
 *    Extras
 * Description:
 *    Any other helpers which will be used throughout the project
 * Sections:
 *    $. Clearfix
 *    $. Flexible
 *    $. States
 *    $. Breakpoint Visibility
 */
/* $. Clearfix - http://goo.gl/5Fvrh
\*----------------------------------------------------------------*/
form:after, .panel:after, .section:after, .nav:after,
.cf:after,
.media:after {
  content: "";
  display: table;
  clear: both; }

/* $. Flexible
\*----------------------------------------------------------------*/
.flexible {
  position: relative;
  height: 250px;
  overflow: hidden;
  height: 300px;
  height: 400px; }
  .flexible iframe,
  .flexible object,
  .flexible embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }

/* $. States
\*----------------------------------------------------------------*/
/* Visually Hidden */
.is-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important; }

.is-current,
.is-current a {
  color: #252525; }

/* $. Breakpoint Visibility
\*----------------------------------------------------------------*/
.is-visible--bp2 {
  display: none;
  display: block; }

.is-visible--bp4 {
  display: none; }

/**
 * Title:
 *    Overrides
 * Description:
 *    Global overrides to be used throughout a project. Using !important as
 *    we always want them to override existing styles.
 * Sections:
 *    $. Box Model
 *    $. Positioning
 *    $. Type Styling
 */
/* $. Box Model
\*----------------------------------------------------------------*/
.u-zero-top {
  margin-top: 0; }

.u-zero-bottom {
  margin-bottom: 0; }

.u-push-top {
  margin-top: 1em; }

.u-push-top\@2 {
  margin-top: 2em; }

.u-push-top\/2 {
  margin-top: 0.5em; }

.u-push-bottom {
  margin-bottom: 1em; }

.u-push-bottom\@2 {
  margin-bottom: 2em; }

.u-push-bottom\/2 {
  margin-bottom: 0.5em; }

.u-display-block {
  display: block; }

.u-display-inline {
  display: inline-block; }

.u-display-none {
  display: none; }

.u-vertical-top {
  vertical-align: top; }

.u-vertical-middle {
  vertical-align: middle; }

/* $. Positioning
\*----------------------------------------------------------------*/
/* Alignment */
.u-align-left {
  text-align: left; }

.u-align-center {
  text-align: center; }

.u-align-right {
  text-align: right; }

/* Floats */
.u-float-none {
  float: none; }

.u-float-left {
  float: left; }

.u-float-right {
  float: right; }

/* Size specific */
/* $. Type Styling
\*----------------------------------------------------------------*/
/* Families */
.u-family {
  font-family: Corbel, "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", "DejaVu Sans", "Bitstream Vera Sans", "Liberation Sans", Verdana, "Verdana Ref", sans-serif; }

/* Sizing */
.u-size-small {
  font-size: 12px; }

.u-size-large {
  font-size: 20px; }

/* Weight */
.u-weight-normal {
  font-weight: 300; }

.u-weight-medium {
  font-weight: 500; }

.u-weight-bold {
  font-weight: 700; }

/* Style */
.u-style-italic {
  font-style: italic; }

.u-style-uppercase {
  text-transform: uppercase; }

.u-style-underline {
  text-decoration: underline; }

/* $. Styling
\*----------------------------------------------------------------*/
/* Borders */
.u-rounded {
  border-radius: 100%; }

.u-curved {
  border-radius: 1em; }

.u-bordered {
  border: 0.5em solid #FFFFFF; }

/**
 * Title:
 *    Debugging
 * Description:
 *    helper class to show which breakpoint you're currently on
 * Sections:
 *    $. Mixin
 *    $. Class
 */
/* $. Mixin
\*----------------------------------------------------------------*/
/* $. Class
\*----------------------------------------------------------------*/
body.debug:before {
  position: fixed;
  z-index: 50;
  right: 1em;
  bottom: 1em;
  display: inline-block;
  padding: .35em;
  font-size: .8em;
  text-transform: uppercase;
  color: #FFF;
  background-color: rgba(0, 0, 0, 0.75);
  content: "Breakpoint 0"; }

body.debug:before {
  content: "Breakpoint 1"; }

body.debug:before {
  content: "Breakpoint 2"; }

body.debug:before {
  content: "Breakpoint 3"; }

/* $. Styles
\*----------------------------------------------------------------*/
.lt-ie9 .container {
  width: 960px; }

